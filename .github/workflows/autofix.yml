name: autofix.ci

on:
  push:
    branches: ['main']
  pull_request:

permissions:
  contents: write

jobs:
  autofix:
    name: Run autofix.ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine Node.js version
        id: get_node_version
        shell: bash
        run: |
          if [[ -f .nvmrc ]]; then
            echo "node_version=$(<.nvmrc)" >> "$GITHUB_OUTPUT"
          elif [[ -f package.json ]]; then
            NODE_VERSION=$(jq -er '.engines.node // empty' package.json || true)
            echo "node_version=${NODE_VERSION:-lts/*}" >> "$GITHUB_OUTPUT"
          else
            echo "node_version=lts/*" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect package manager
        id: detect_pm
        shell: bash
        run: |
          if [[ -f pnpm-lock.yaml ]]; then
            PACKAGE_MANAGER="pnpm"; VERSION="latest"
          elif [[ -f yarn.lock ]]; then
            PACKAGE_MANAGER="yarn"; VERSION="latest"
          elif [[ -f package-lock.json ]]; then
            PACKAGE_MANAGER="npm"; VERSION="latest"
          elif [[ -f bun.lock ]] || [[ -f bun.lockb ]]; then
            PACKAGE_MANAGER="bun"; VERSION="latest"
          elif [[ -f package.json ]]; then
            RAW_PM=$(jq -r '.packageManager // empty' package.json)
            if [[ -n "$RAW_PM" ]]; then
              PACKAGE_MANAGER="${RAW_PM%%@*}"
              VERSION="${RAW_PM#*@}"
              [[ "$VERSION" == "$RAW_PM" ]] && VERSION="latest"
            else
              PACKAGE_MANAGER="npm"
              VERSION="latest"
            fi
          else
            PACKAGE_MANAGER="npm"
            VERSION="latest"
          fi
          echo "pm_name=$PACKAGE_MANAGER" >> "$GITHUB_OUTPUT"
          echo "pm_version=$VERSION" >> "$GITHUB_OUTPUT"
        outputs:
          pm_name: ${{ steps.detect_pm.outputs.pm_name }}
          pm_version: ${{ steps.detect_pm.outputs.pm_version }}

      - name: Setup PNPM
        if: ${{ steps.detect_pm.outputs.pm_name == 'pnpm' }}
        uses: pnpm/action-setup@v4
        with:
          version: ${{ steps.detect_pm.outputs.pm_version }}

      - name: Setup Bun
        if: ${{ steps.detect_pm.outputs.pm_name == 'bun' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ steps.detect_pm.outputs.pm_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.get_node_version.outputs.node_version }}
          cache-dependency-path: |
            **/package-lock.json
            **/pnpm-lock.yaml
            **/yarn.lock
            **/bun.lock
            **/bun.lockb

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
            ~/.yarn/cache
            ~/.bun/install/cache
          key: ${{ runner.os }}-${{ steps.detect_pm.outputs.pm_name }}-${{ hashFiles('**/pnpm-lock.yaml', '**/yarn.lock', '**/package-lock.json', '**/bun.lock', '**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.detect_pm.outputs.pm_name }}-

      - name: Install dependencies
        shell: bash
        run: |
          case "${{ steps.detect_pm.outputs.pm_name }}" in
            pnpm) pnpm install --no-frozen-lockfile ;;
            yarn) yarn install ;;
            bun)  bun install ;;
            *)    npm install ;;
          esac

      - name: Setup Biome CLI
        uses: biomejs/setup-biome@v2
        with:
          version: latest

      - name: Run Biome check
        run: biome check .

      - name: Run autofix.ci
        uses: autofix-ci/action@v1
